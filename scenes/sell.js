const { Markup } = require("telegraf");
const WizardScene = require("telegraf/scenes/wizard");
const start = require("../commands/start");
const currencies = require("../currencies.json");
const convertMoney = require("../helpers/convertMoney");
const getExchangeRate = require("../helpers/getExchangeRate");
const {parse} = require("dotenv");
const scene = new WizardScene(
  "sell",
  async (ctx) => {
    try {
      var currency = currencies.find((v) => v.code == ctx.scene.state.code);

      var props = {
        minAmount: 30,
        maxAmount: 1000,
      };

      var mincrypto = await convertMoney(props.minAmount, currency.code.toUpperCase(), "USD")
      var usdrate = await getExchangeRate(currency.code.toUpperCase(), "RUB")
      usdrate = await 1/usdrate

      usdrate = usdrate * 8


      mincrypto = mincrypto + usdrate


      var maxcrypto = await convertMoney(props.maxAmount, currency.code.toUpperCase(), "USD")
      usdrate = await getExchangeRate(currency.code.toUpperCase(), "RUB")
      usdrate = await 1/usdrate

      usdrate = usdrate * 8

      maxcrypto = maxcrypto + usdrate


      props.minAmountInCrypto = (
          await mincrypto
      ).toFixed(currency.decimal);
      props.maxAmountInCrypto = (
        await maxcrypto
      ).toFixed(currency.decimal);

      props.minAmount = (((await getExchangeRate(currency.code.toUpperCase(), "RUB") + 8) * parseFloat(props.minAmountInCrypto)).toFixed(2))
      props.maxAmount = (((await getExchangeRate(currency.code.toUpperCase(), "RUB") + 8) * parseFloat(props.maxAmountInCrypto)).toFixed(2))

      await ctx.scene.reply(
        `–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å <b>${currency.title}</b>?

(–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –æ—Ç ${props.minAmountInCrypto} –¥–æ ${
          props.maxAmountInCrypto
        } <b>${currency.code.toUpperCase()}</b> –∏–ª–∏ –æ—Ç ${props.minAmount} –¥–æ ${
          props.maxAmount
        } <b>‚ÇΩ</b>)

<b>–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å —Å—É–º–º—É –±–æ–ª—å—à–µ, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:</b>
@Maestro_operator`,
        {
          parse_mode: "HTML",
          reply_markup: Markup.inlineKeyboard([
            [Markup.callbackButton("–û—Ç–º–µ–Ω–∞", "cancel")],
          ]),
        }
      );

      ctx.scene.state.data = {};

      return ctx.wizard.next();
    } catch (err) {
      ctx.reply(err).catch((e) => e);
      return ctx.scene.leave();
    }
  },
  async (ctx) => {
    try {
      var currency = currencies.find((v) => v.code == ctx.scene.state.code);
      var amount = parseFloat(ctx.message?.text);
      if (isNaN(amount)) return ctx.wizard.prevStep();

      var props = {
        minAmount: 30,
        maxAmount: 1000,
      };

      var mincrypto = await convertMoney(props.minAmount, currency.code.toUpperCase(), "USD")
      var usdrate = await getExchangeRate(currency.code.toUpperCase(), "RUB")
      usdrate = await 1/usdrate

      usdrate = usdrate * 8


      mincrypto = mincrypto + usdrate


      var maxcrypto = await convertMoney(props.maxAmount, currency.code.toUpperCase(), "USD")
      usdrate = await getExchangeRate(currency.code.toUpperCase(), "RUB")
      usdrate = await 1/usdrate

      usdrate = usdrate * 8

      maxcrypto = maxcrypto + usdrate


      props.minAmountInCrypto = (
          await mincrypto
      ).toFixed(currency.decimal);
      props.maxAmountInCrypto = (
          await maxcrypto
      ).toFixed(currency.decimal);

      props.minAmount = (((await getExchangeRate(currency.code.toUpperCase(), "RUB") + 8) * parseFloat(props.minAmountInCrypto)).toFixed(2))
      props.maxAmount = (((await getExchangeRate(currency.code.toUpperCase(), "RUB") + 8) * parseFloat(props.maxAmountInCrypto)).toFixed(2))


      if (amount < props.minAmountInCrypto) {
        await ctx
          .reply(
            `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ - ${
              props.minAmountInCrypto
            } ${currency.code.toUpperCase()}`
          )
          .catch((e) => e);
        return ctx.wizard.prevStep();
      }
      if (amount > props.maxAmountInCrypto) {
        await ctx
          .reply(
            `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ - ${
              props.maxAmountInCrypto
            } ${currency.code.toUpperCase()}`
          )
          .catch((e) => e);
        return ctx.wizard.prevStep();
      }

      var exchangeRate = await getExchangeRate(currency.code.toUpperCase(), "RUB") + 8,
        convertAmount = parseFloat(exchangeRate * amount).toFixed(2);

      ctx.scene.state.data = {
        amount,
        convertAmount,
      };

      return ctx.wizard.nextStep();
    } catch (err) {
      ctx.reply(err).catch((e) => e);
      return ctx.scene.leave();
    }
  },
  async (ctx) => {
    try {
      var currency = currencies.find((v) => v.code == ctx.scene.state.code);

      var { amount, convertAmount } = ctx.scene.state.data;
      convertAmount = parseFloat(convertAmount);

      await ctx.scene.reply(
        `‚ÑπÔ∏è –ó–∞ –ø—Ä–æ–¥–∞–∂—É <code>${amount}</code> ${currency.code.toUpperCase()}, –í—ã –ø–æ–ª—É—á–∏—Ç–µ <b>${convertAmount} ‚ÇΩ</b>

‚òëÔ∏è –í—ã —Å–æ–≥–ª–∞—Å–Ω—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`,
        {
          parse_mode: "HTML",
          reply_markup: Markup.inlineKeyboard([
            [Markup.callbackButton("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "next")],
            [Markup.callbackButton("–û—Ç–º–µ–Ω–∞", "cancel")],
          ]),
        }
      );

      return ctx.wizard.next();
    } catch (err) {
      ctx.reply(err).catch((e) => e);
      return ctx.scene.leave();
    }
  },
  async (ctx) => {
    try {
      if (ctx.callbackQuery?.data != "next") return ctx.wizard.prevStep();

      return ctx.wizard.nextStep();
    } catch (err) {
      ctx.reply("–û—à–∏–±–∫–∞").catch((e) => e);
      return ctx.scene.leave();
    }
  },
  async (ctx) => {
    try {
      var currency = currencies.find((v) => v.code == ctx.scene.state.code);

      var { amount, convertAmount } = ctx.scene.state.data;
      await ctx.scene.reply(
        `<b>–ü—Ä–æ–¥–∞–∂–∞ ${
          currency.title
        }:</b> ${amount} ${currency.code.toUpperCase()}

<b>üíµ –°—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é:</b> ${convertAmount} ‚ÇΩ

<b>üí≥ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã:</b>`,
        {
          parse_mode: "HTML",
          reply_markup: Markup.inlineKeyboard([
            [Markup.callbackButton("–û—Ç–º–µ–Ω–∞", "cancel")],
          ]),
        }
      );

      return ctx.wizard.next();
    } catch (err) {
      ctx.reply("–û—à–∏–±–∫–∞").catch((e) => e);
      return ctx.scene.leave();
    }
  },
  async (ctx) => {
    try {
      if (String(ctx.message?.text).replace(/\D/giu, "").length < 1)
        return ctx.wizard.prevStep();

      ctx.scene.state.data.bankCard = ctx.message.text.replace(
        /[^\d\s]+/giu,
        ""
      );

      return ctx.wizard.nextStep();
    } catch (err) {
      ctx.reply("–û—à–∏–±–∫–∞").catch((e) => e);
      return ctx.scene.leave();
    }
  },

  async (ctx) => {
    try {
      var currency = currencies.find((v) => v.code == ctx.scene.state.code);

      var { amount, convertAmount, bankCard } = ctx.scene.state.data;
      await ctx.scene.reply(
        `‚òëÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –í–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö:

<b>‚ÜóÔ∏è –°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏:</b> <code>${amount}</code> ${currency.code.toUpperCase()}

<b>üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã:</b> ${bankCard}
<b>üíµ –í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏:</b> ${convertAmount} ‚ÇΩ

<b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?</b>`,
        {
          parse_mode: "HTML",
          reply_markup: Markup.inlineKeyboard([
            [Markup.callbackButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "next")],
            [Markup.callbackButton("–û—Ç–º–µ–Ω–∞", "cancel")],
          ]),
        }
      );

      return ctx.wizard.next();
    } catch (err) {
      ctx.reply("–û—à–∏–±–∫–∞").catch((e) => e);
      return ctx.scene.leave();
    }
  },

  async (ctx) => {
    try {
      if (ctx.callbackQuery?.data != "next") return ctx.wizard.prevStep();

      return ctx.wizard.nextStep();
    } catch (err) {
      ctx.reply("–û—à–∏–±–∫–∞").catch((e) => e);
      return ctx.scene.leave();
    }
  },

  async (ctx) => {
    try {
      var currency = currencies.find((v) => v.code == ctx.scene.state.code);

      var { amount, convertAmount, bankCard } = ctx.scene.state.data;
      var id = Math.random() + new Date().valueOf();
      ctx.session[id] = ctx.scene.state.data;
      ctx.session[id].currency = currency;
      await ctx.scene.reply(
        `‚òëÔ∏è –ó–∞—è–≤–∫–∞ ${currency.code.toUpperCase()}

<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ:</b> <code>${amount}</code> ${currency.code.toUpperCase()}

<b>–ù–∞ –¥–∞–Ω–Ω—ã–π ${currency.title}-–∞–¥—Ä–µ—Å:</b>

<code>${currency.address}</code>

<b>üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã:</b> ${bankCard}
<b>üíµ –í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏:</b> ${convertAmount} ‚ÇΩ

‚ÑπÔ∏è –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ <b>${amount} ${currency.code.toUpperCase()}</b> –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π ${
          currency.title
        }-–∞–¥—Ä–µ—Å –≤—ã—à–µ, –Ω–∞–∂–º–∏—Ç–µ <b>¬´‚úÖ–Ø –ø–µ—Ä–µ–≤–µ–ª(–∞)¬ª</b> –∏–ª–∏ –∂–µ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>¬´‚ùå–û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É¬ª</b>`,
        {
          parse_mode: "HTML",
          reply_markup: Markup.inlineKeyboard([
            [Markup.callbackButton("‚úÖ –Ø –ø–µ—Ä–µ–≤–µ–ª(–∞)", `i_payed_${id}`)],
            [Markup.callbackButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", "cancel_request")],
          ]),
        }
      );
    } catch (err) {
      ctx.reply("–û—à–∏–±–∫–∞").catch((e) => e);
    }
    return ctx.scene.leave();
  }
);

scene.leave(start);

module.exports = scene;
