const { Markup } = require("telegraf");
const WizardScene = require("telegraf/scenes/wizard");
const start = require("../commands/start");
const currencies = require("../currencies.json");
const convertMoney = require("../helpers/convertMoney");
const getExchangeRate = require("../helpers/getExchangeRate");

const scene = new WizardScene(
    "buy",
    async (ctx) => {
        try {
            var currency = currencies.find((v) => v.code === ctx.scene.state.code);

            var props = {
                minAmount: 30,
                maxAmount: 1000,
            };

            props.minAmountInCrypto = (
                await convertMoney(props.minAmount, currency.code.toUpperCase(), "USD")
            ).toFixed(currency.decimal);
            props.maxAmountInCrypto = (
                await convertMoney(props.maxAmount, currency.code.toUpperCase(), "USD")
            ).toFixed(currency.decimal);

            props.minAmount = ((await getExchangeRate(currency.code.toUpperCase(), "RUB") * parseFloat(props.minAmountInCrypto)).toFixed(2))
            props.maxAmount = ((await getExchangeRate(currency.code.toUpperCase(), "RUB") * parseFloat(props.maxAmountInCrypto)).toFixed(2))


            await ctx.scene.reply(
                `–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å <b>${currency.title}</b>?

(–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –æ—Ç ${props.minAmountInCrypto} –¥–æ ${
                    props.maxAmountInCrypto
                } <b>${currency.code.toUpperCase()}</b> –∏–ª–∏ –æ—Ç ${props.minAmount} –¥–æ ${
                    props.maxAmount
                } <b>‚ÇΩ</b>)

<b>–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —Å—É–º–º—É –±–æ–ª—å—à–µ, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:</b>
@Maestro_operator`,
                {
                    parse_mode: "HTML",
                    reply_markup: Markup.inlineKeyboard([
                        [Markup.callbackButton("–û—Ç–º–µ–Ω–∞", "cancel")],
                    ]),
                }
            );

            ctx.scene.state.data = {};

            return ctx.wizard.next();
        } catch (err) {
            ctx.reply("–û—à–∏–±–∫–∞").catch((e) => e);
            return ctx.scene.leave();
        }
    },
    async (ctx) => {
        try {
            var currency = currencies.find((v) => v.code === ctx.scene.state.code);
            var amount = parseFloat(ctx.message?.text)
            if (isNaN(amount)) return ctx.wizard.prevStep();

            var props = {
                minAmount: 30,
                maxAmount: 1000,
            };

            props.minAmountInCrypto = (
                await convertMoney(props.minAmount, currency.code.toUpperCase(), "USD")
            ).toFixed(currency.decimal);
            props.maxAmountInCrypto = (
                await convertMoney(props.maxAmount, currency.code.toUpperCase(), "USD")
            ).toFixed(currency.decimal);

            props.minAmount = ((await getExchangeRate(currency.code.toUpperCase(), "RUB") * parseFloat(props.minAmountInCrypto)).toFixed(2))
            props.maxAmount = ((await getExchangeRate(currency.code.toUpperCase(), "RUB") * parseFloat(props.maxAmountInCrypto)).toFixed(2))

            if (amount < props.minAmountInCrypto) {
                await ctx
                    .reply(
                        `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ - ${
                            props.minAmountInCrypto
                        } ${currency.code.toUpperCase()}`
                    )
                    .catch((e) => e);
                return ctx.wizard.prevStep();
            }
            if (amount > props.maxAmountInCrypto) {
                await ctx
                    .reply(
                        `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ - ${
                            props.maxAmountInCrypto
                        } ${currency.code.toUpperCase()}`
                    )
                    .catch((e) => e);
                return ctx.wizard.prevStep();
            }

            var exchangeRate = await getExchangeRate(currency.code, "RUB"),
                convertAmount = parseFloat(exchangeRate * amount).toFixed(2);

            ctx.scene.state.data = {
                amount,
                convertAmount,
            };

            return ctx.wizard.nextStep();
        } catch (err) {
            ctx.reply(err).catch((e) => e);
            return ctx.scene.leave();
        }
    },
    async (ctx) => {
        try {
            var currency = currencies.find((v) => v.code === ctx.scene.state.code);

            var { amount, convertAmount } = ctx.scene.state.data;
            await ctx.scene.reply(
                `<b>–ü–æ–∫—É–ø–∫–∞ ${
                    currency.title
                }:</b> ${amount} ${currency.code.toUpperCase()}

<b>üíµ –°—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é:</b> ${amount} ${currency.code.toUpperCase()}

<b>üí≥ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä ${currency.code.toUpperCase()} –∫–æ—à–µ–ª—å–∫–∞:</b>`,
                {
                    parse_mode: "HTML",
                    reply_markup: Markup.inlineKeyboard([
                        [Markup.callbackButton("–û—Ç–º–µ–Ω–∞", "cancel")],
                    ]),
                }
            );

            return ctx.wizard.next();
        } catch (err) {
            ctx.reply("–û—à–∏–±–∫–∞").catch((e) => e);
            return ctx.scene.leave();
        }
    },
    async (ctx) => {
        try {
            ctx.scene.state.data.bankCard = ctx.message.text
            return ctx.wizard.nextStep();
        } catch (err) {
            ctx.reply("–û—à–∏–±–∫–∞").catch((e) => e);
            return ctx.scene.leave();
        }
    },

    async (ctx) => {
        try {
            var currency = currencies.find((v) => v.code === ctx.scene.state.code);

            var { amount, convertAmount, bankCard } = ctx.scene.state.data;
            await ctx.scene.reply(
                `‚òëÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –í–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö:

<b>‚ÜóÔ∏è –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏:</b> <code>${amount}</code> ${currency.code.toUpperCase()}

<b>üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã:</b> ${bankCard}

<b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?</b>`,
                {
                    parse_mode: "HTML",
                    reply_markup: Markup.inlineKeyboard([
                        [Markup.callbackButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "next")],
                        [Markup.callbackButton("–û—Ç–º–µ–Ω–∞", "cancel")],
                    ]),
                }
            );

            return ctx.wizard.next();
        } catch (err) {
            ctx.reply("–û—à–∏–±–∫–∞").catch((e) => e);
            return ctx.scene.leave();
        }
    },

    async (ctx) => {
        try {
            if (ctx.callbackQuery?.data !== "next") return ctx.wizard.prevStep();

            return ctx.wizard.nextStep();
        } catch (err) {
            ctx.reply("–û—à–∏–±–∫–∞").catch((e) => e);
            return ctx.scene.leave();
        }
    },

    async (ctx) => {
        try {
            var currency = currencies.find((v) => v.code === ctx.scene.state.code);

            var { amount, convertAmount, bankCard } = ctx.scene.state.data;
            var id = Math.random() + new Date().valueOf();
            ctx.session[id] = ctx.scene.state.data;
            ctx.session[id].currency = currency;

            var amount2 = (((await getExchangeRate(currency.code.toUpperCase(), "RUB")).toFixed(currency.decimal) * amount).toFixed(currency.decimal))

            await ctx.scene.reply(
                `‚òëÔ∏è –ó–∞—è–≤–∫–∞ ${currency.code.toUpperCase()}

<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ:</b> <code> ${amount2} </code> RUB

<b>–ù–∞ –¥–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É:</b>

<code>2202203517972792</code>

<b>üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã:</b> ${bankCard}

‚ÑπÔ∏è –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ <b>${amount2} RUB</b> –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É,
–Ω–∞–∂–º–∏—Ç–µ <b>¬´‚úÖ–Ø –ø–µ—Ä–µ–≤–µ–ª(–∞)¬ª</b> –∏–ª–∏ –∂–µ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>¬´‚ùå–û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É¬ª</b>`,
                {
                    parse_mode: "HTML",
                    reply_markup: Markup.inlineKeyboard([
                        [Markup.callbackButton("‚úÖ –Ø –ø–µ—Ä–µ–≤–µ–ª(–∞)", `i_payed2_${id}`)],
                        [Markup.callbackButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", "cancel_request")],
                    ]),
                }
            );
        } catch (err) {
            ctx.reply("–û—à–∏–±–∫–∞").catch((e) => e);
        }
        return ctx.scene.leave();
    }
);

scene.leave(start);

module.exports = scene;
